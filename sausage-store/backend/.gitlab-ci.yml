stages:
  - build
  - test
  - release
  - notify
  - deploy

include:
  - template: Security/SAST.gitlab-ci.yml 

cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

semgrep-sast:
  stage: test
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    MAVEN_REPO_PATH: ${MAVEN_REPO_PATH} 
  needs:
    - build-backend-code-job

sonarqube-backend-sast:
  stage: test
  dependencies:
    - "build-backend-code-job"
  when: on_success
  image: 
    name: maven:3.9.3-eclipse-temurin-17
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    SONAR_HOST_URL: ${SONARQUBE_URL}
    SONAR_TOKEN: ${SONAR_LOGIN}
    SPRING_FLYWAY_ENABLED: false
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - cd backend
    - mvn verify sonar:sonar -Dspring.flayway.enabled=false -Dsonar.qualitygate.wait=true -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK} -Dsonar.projectName=${SONAR_PROJECT_NAME_BACK} -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONAR_LOGIN}


build-backend-code-job:
  stage: build  
  only:
    changes:
    - backend/**/*
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - echo "test"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend:$CI_COMMIT_SHA"
      --build-arg VERSION=${VERSION}
      --cache=true
  artifacts:
    paths:
      - backend/target/sausage-store-${VERSION}.jar
      - ${CI_PROJECT_DIR}/.m2/

upload-backend-release:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  only:
    changes:
      - backend/**/*
  needs:
    - build-backend-code-job
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $VERSION
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA latest

deploy-backend:
  stage: deploy
  only:
    changes:
      - backend/**/*
  needs:
    - upload-backend-release
  image: docker:24.0.7-alpine3.19
  before_script:
    - apk add openssh-client bash gettext-envsubst docker jq
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - docker context create remote --description "remote ssh" --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
  script:
    - echo "VERSION=${VERSION}" >> deploy.env
    - echo "SPRING_DATASOURCE_URL=jdbc:postgresql://${PSQL_HOST}:${PSQL_PORT}/${PSQL_DBNAME}?ssl=true&sslrootcert=/app/YandexInternalRootCA.crt" >> deploy.env
    - echo "SPRING_DATASOURCE_USERNAME=${PSQL_USER}" >> deploy.env
    - echo "SPRING_DATASOURCE_PASSWORD=${PSQL_PASSWORD}" >> deploy.env
    - echo "SPRING_DATA_MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@${MONGO_HOST}:27018/${MONGO_DATABASE}?tls=true" >> deploy.env
    - echo "REPORT_PATH=/tmp/sausage-store/reports" >> deploy.env
    - echo "LOG_PATH=/tmp/sausage-store/logs" >> deploy.env
    - echo "LOG_FILE=sausage-store-backend.log" >> deploy.env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    #- docker --context remote compose --env-file deploy.env up backend -d --pull "always" --force-recreate
    - /bin/bash ./backend/deploy.sh
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: http://${DEV_HOST}
    auto_stop_in: 1h
  when: 
    manual
      
telegram-notification-backend:
  stage: notify
  only:
    changes:
    - backend/**/*
    variables:
    - $CI_COMMIT_MESSAGE =~ /send notification/ 
  script:
    - curl -s -d "chat_id=-1002506958500&disable_web_page_preview=1&text=Артем Подольный, backend собран. Ссылка на артефакт%3A $CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-backend-code-job" https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage
  needs:
    - build-backend-code-job
    